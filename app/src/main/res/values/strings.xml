<resources>
    <string name="app_name">Arduino Remote</string>
    <string name="wifiText1">To control your microcontroller through a WiFi access point, you must perform the following steps:\n\n<b>Step 1:</b>\nLaunch a WiFi hotspot on your controller.\nCode:\n</string>
    <string name="wifiText2">#include &#60;ESP8266WiFi.h&#62;\n#include &#60;WiFiClient.h&#62;\nconst char* ssid = \"Wemos HotSpot\";\nconst char* password = \"12345678\";\nWiFiServer server(80);  // Create a server on port 80\n\nvoid setup() {\n\tSerial.begin(115200);\n\tWiFi.softAP(ssid, password);\n\tSerial.println();\n\tSerial.println(\"IP address: \");\n\tSerial.println(WiFi.softAPIP());\n\tserver.begin(); // Start the server\n}\n\nvoid loop() {\n  \n}</string>
    <string name="wifiText3"><b>Step 2:</b>\nTurn on the serial monitor in the Arduino IDE. You will see the IP of your access point. You will need this IP when creating a remote control in the application. If you don\'t see the IP just restart your controller.\n\n<b>Step 3:</b>\nClick on \"Remote constructor\" - You have entered the remote constructor where you can create, delete and edit remotes.\n\nClick on \"Add new remote\" to create a new remote. Click WiFi. Enter the name of this remote (for example, the name of your project) and the IP address from Step 2. Click OK. Your new remote will appear on this tab. Click on it and the editor of this remote will open. Click on ADD at the top, select Button. Enter the name of the button (For example \"X\"), click ADD. Move the button to a convenient place for you. Clicking the button will bring up the change menu for that button.\n\n<b>Step 4:</b>\nAdd code to the loop function to read the button.\nCode:\n</string>
    <string name="wifiText4">WiFiClient client = server.available();  // Listen for incoming clients\nclient.setTimeout(100);\nif(client){\n\tString data = client.readStringUntil(\'\u005cn\'); // Read the data from the client\n\tdata.trim();\n\tif(data != \"\"){\n\t\tSerial.println(data); // show what the controller sent\n\t}\n}  </string>
    <string name="wifiText5"><b>Step 5:</b>\nStart your controller. On your phone, in WiFi networks, find the new \"Wemos HotSpot\" hotspot. Connect to this hotspot.\n\n<b>Step 6:</b>\nIn the app, go to the first tab (the tab labeled \"ARDUINO REMOTE\") and select the remote from Step 3. Turn on the serial monitor and press your button. When a button is pressed, the serial monitor should show an individual code for this button - b0x1. When released, it will show - b0x0.\n\nIf you see these codes, then the everything is working, the application sends codes and arduino receives them.\n\nYou can also add a switch, a potentiometer and a text field.\n\n<b>The switch</b> sends 1 at the end of the individual code when clicked and 0 when clicked again.\n\n<b>The potentiometer</b> sends an individual code and at the end of the code the value.\nPotentiometer reading code:\n</string>
    <string name="wifiText6">char *p;\nchar buffer[128];\nString potentiometerParts[2];\nString potentiometer = data;\npotentiometer.toCharArray(buffer, sizeof(buffer));\nint i = 0;\np = strtok(buffer, \"x\");\nwhile(p &#38;&#38; i &#60; 2){\n\tpotentiometerParts[i] = p;\n\tp = strtok(NULL, \"x\");\n}\n\nif(potentiometerParts[0] != \"\"){\n\t//getting the code of the potentiometer\n\tString potentiometerCode = potentiometerParts[0];\n\tSerial.println(\"code: \" + potentiometerCode);\n\t//getting the value of the potentiometer\n\tint potentiometerValue = potentiometerParts[1].toInt();\n\tSerial.println(\"value: \" + String(potentiometerValue));\n}</string>
    <string name="wifiText7"><b>The text field</b> is used to receive information from the arduino. For the text field to work, add the variable String sendValue = \"\"; over the setup() function.\nSending data option:\n</string>
    <string name="wifiText8">if(data == \"code of something\"){\n\tsendValue = \"Hello World!\";\n}\nclient.print(sendValue);</string>
    <string name="wifiText9"><b>Important:</b>\nThis code needs to be inside if(client){}\n\n<b>Usage example:</b>\nCreate a remote and add controls in the following order:\n1. Switch\n2. Button\n3. Text field\n4. Potentiometer min = 1 max = 3\n5. Potentiometer min = 0 max = 500\n\nNow copy and paste this code:\n</string>
    <string name="wifiText10">#include &#60;ESP8266WiFi.h&#62;\n#include &#60;WiFiClient.h&#62;\nconst char* ssid = \"Wemos HotSpot\";\nconst char* password = \"12345678\";\nWiFiServerserver(80);  // Create a server on port 80\nString sendValue = \"\";\n\nvoid setup() {\n\tSerial.begin(115200);\n\tWiFi.softAP(ssid, password);\n\tSerial.println();\n\tSerial.println(\"IP address: \");\n\tSerial.println(WiFi.softAPIP());\n\tserver.begin(); // Start the server\n}\n\nvoid loop() {\n\tWiFiClient client = server.available(); // Listen for incoming clients\n\tclient.setTimeout(100);\n\tif(client){\n\t\tString data = client.readStringUntil(\'\u005cn\');  // Read the data from the client\n\t\tdata.trim();\n\t\t// here you can see the incoming codes\n\t\tif(data != \"\"){\n\t\t\tSerial.println(data);\n\t\t}\n\t\t// Switch\n\t\tif(data == \"s0x1\") {\n\t\t\tdigitalWrite(LED_BUILTIN, LOW); // LED on\n\t\t} else if (data == \"s0x0\"){\n\t\t\tdigitalWrite(LED_BUILTIN, HIGH); // LED off\n\t\t}\n
        \n\t\t//Button\n\t\tif (data == \"b1x1\") {\n\t\t\tsendValue = \"Hello\";\n\t\t} else if (data == \"b1x0\") {\n\t\t\tsendValue = \"Bye bye\";\n\t\t}\n\n\t\t//Potentiometer 1 - 3\n\t\tchar *p;\n\t\tchar buffer[128];\n\t\tString potentiometerParts[2];\n\t\tString potentiometer = data;\n\t\tpotentiometer.toCharArray(buffer, sizeof(buffer));\n\t\tint i = 0;\n\t\tp = strtok(buffer, \"x\");\n\t\twhile(p &#38;&#38; i &#60; 2){\n\t\t\tpotentiometerParts[i] = p;\n\t\t\tp = strtok(NULL, \"x\");\n\t\t\t++i;\n\t\t}\n\n\t\tif(potentiometerParts[0] == \"p3\"){\n\t\t\tint potentiometerValue = potentiometerParts[1].toInt();\n\t\t\tif(potentiometerValue == 1){\n\t\t\t\tsendValue = \"Going slow\";\n\t\t\t} else if(potentiometerValue == 2){\n\t\t\t\tsendValue = \"Going faster\";\n\t\t\t} else if(potentiometerValue == 3){\n\t\t\t\tsendValue = \"Going fast\";\n\t\t\t}\n\t\t}\n\n\t\t// potentiometer 0 - 500\n\t\tpotentiometer = data;\n\t\tpotentiometer.toCharArray(buffer, sizeof(buffer));\n\t\ti = 0;\n\t\tp = strtok(buffer, \"x\");\n\t\twhile(p &#38;&#38; i &#60; 2){\n\t\t\tpotentiometerParts[i] = p;\n\t\t\tp = strtok(NULL, \"x\");\n\t\t\t++i;\n\t\t}\n
        \n\t\tif(potentiometerParts[0] == \"p4\"){\n\t\t\tString potentiometerValue = potentiometerParts[1];\n\t\t\tsendValue = \"Value: \" + potentiometerValue;\n\t\t}\n\n\t\t// send data to text field\n\t\tclient.print(sendValue);\n\t}\n}  </string>
    <string name="wifiText11"><b>Notes:</b>\nTo add a line break in the message sent by the arduino just write "#br#" in the send string.</string>
    <string name="btText1">To control your microcontroller via Bluetooth, you must perform the following steps:\n\n<b>Step 1:</b>\nUpload the code to your controller to start Bluetooth.\nCode:\n</string>
    <string name="btText2">#include \"BluetoothSerial.h\"\nBluetoothSerial SerialBT;\nString data = \"\";\n\nvoid setup() {\n\tSerial.begin(115200);\n\t// Bluetooth device name\n\tSerialBT.begin(\"ESP32\"); // you can enter any name you want\n\tSerial.println(\"Bluetooth started\");\n}\n\nvoid loop() { }</string>
    <string name="btText3"><b>Step 2:</b>\nTurn on the serial monitor in the Arduino IDE, restart the controller and you should see Bluetooth has started.\n\n<b>Step 3:</b>\nAdd your Bluetooth device to the list of Bluetooth devices on your phone (pair).\n\n<b>Step 4:</b>\nClick on \"Remote constructor\" - You have entered the remote constructor where you can create, delete and edit remotes.\n\nClick on \"Add new remote\" to create a new remote. Click on Bluetooth. Enter the name of this remote (for example, the name of your project) and the name of the Bluetooth device (in the example above, it is ESP32). Click OK. Your new remote will appear on this tab. Click on it and the editor of this remote will open. Click on ADD at the top, select Button. Enter a name for the button (eg \"X\"), press ADD. Move the button to a convenient place for you. Clicking on a button will bring up the change menu for that button.\n\n<b>Step 5:</b>\nAdd code to the loop function to read the button.\nCode:\n</string>
    <string name="btText4">void loop() {\n\tdata = \"\";\n\t// Read received messages (LED control command)\n\tif(SerialBT.available()){\n\t\tdelay(1); // pause the controller for reading the incoming data correctly\n\t\twhile(SerialBT.available()){\n\t\t\tchar incomingChar = SerialBT.read();\n\t\t\tif (incomingChar != \'\u005cn\'){\n\t\t\t\tdata += String(incomingChar);\n\t\t\t}\n\t\t}\n\t}\n// this is how you can check which code the remote is sending\n\tif(data != \"\"){\n\t\tSerial.println(data);\n\t}\n}  </string>
    <string name="btText5"><b>Step 6:</b>\nIn the application, go to the first tab (the tab labeled \"ARDUINO REMOTE\") and select the remote you created from Step 4. Turn on the port monitor and press your button. When a button is pressed, the port monitor should receive an individual code for this button - b0x1. When released, it will receive - b0x0.\n\nIf you see these codes, then everything is working, the application sends codes and arduino receives them.\n\nYou can also add a switch, a potentiometer and a text field.\n\n<b>The switch</b> sends 1 at the end of the individual code when clicked and 0 when clicked again.\n\n<b>The potentiometer</b> sends an individual code and at the end of the code the value.\nPotentiometer reading code:\n</string>
    <string name="btText6">char *p;\nchar buffer[128];\nString potentiometerParts[2];\nString potentiometer = data;\npotentiometer.toCharArray(buffer, sizeof(buffer));\nint i = 0;\np = strtok(buffer, \"x\");\nwhile(p &#38;&#38; i &#60; 2){\n\tpotentiometerParts[i] = p;\n\tp = strtok(NULL, \"x\");\n\t++i;\n}\n\nif(potentiometerParts[0] != \"\"){\n\t//getting the code of the potentiometer\n\tString potentiometerCode = potentiometerParts[0];\n\tSerial.println(\"code: \" + potentiometerCode);\n\t//getting the value of the potentiometer\n\tint potentiometerValue = potentiometerParts[1].toInt();\n\tSerial.println(\"value: \" + String(potentiometerValue));\n}</string>
    <string name="btText7"><b>The text field</b> is used to receive information from the arduino. To make the text field work, we call the bluetoothPrintLine() function. Write a string you want to send in the brackets. <b>IMPORTANT:</b> there must be an asterisk \"*\" at the end of the string, this is a stop character so that the application detects the end of the message.\nExample:\n</string>
    <string name="btText8">if(data == \"b0x1\"){\n\tbluetoothPrintLine(\"Hello World!*\");\n}\n\nvoid bluetoothPrintLine(String line) {\n\tunsigned l = line.length();\n\tfor (int i = 0; i &#60; l; i++) {\n\t\tif (line[i] != \'\u005c0\'){\n\t\t\tSerialBT.write(byte(line[i]));\n\t\t}\n\t}\n}</string>
    <string name="btText9"><b>Usage example:</b>\ncreate a remote and add controls in the following order:\n1. Switch\n2. Button\n3. Text field\n4. Potentiometer min = 1 max = 3\n5. Potentiometer min = 0 max = 500\n\nNow copy and paste the following code:\n</string>
    <string name="btText10">#include \"BluetoothSerial.h\"\nBluetoothSerial SerialBT;\nString data = \"\";\n\nvoid setup() {\n\tpinMode(2, OUTPUT); // Builtin LED\n\tSerial.begin(115200);\n\t// Bluetooth device name\n\tSerialBT.begin(\"ESP32\"); // you can enter any name you want\n\tSerial.println(\"Bluetooth started\");\n}\n\nvoid loop() {\n\tdata = \"\";\n\tif(SerialBT.available()){\n\t\tdelay(1); // pause the controller for reading the incoming data correctly\n\t\twhile(SerialBT.available()){\n\t\t\tchar incomingChar = SerialBT.read();\n\t\t\tif (incomingChar != \'\u005cn\'){\n\t\t\t\tdata += String(incomingChar);\n\t\t\t}\n\t\t}\n\t}\n\n\t// switch\n\tif(data == \"s0x1\"){\n\t\tdigitalWrite(2, HIGH); // LED on\n\t} else if (data == \"s0x0\"){\n\t\tdigitalWrite(2, LOW); // LED off\n\t}\n\n\t// button\n\tif (data == \"b1x1\") {\n\t\tbluetoothPrintLine(\"Hello*\");\n\t} else if (data == \"b1x0\"){\n\t\tbluetoothPrintLine(\"Bye bye*\");\n\t}\n
    \n\t// potentiometer 1 - 3\n\tchar *p;\n\tchar buffer[128];\n\tString potentiometerParts[2];\n\tString potentiometer = data;\n\tpotentiometer.toCharArray(buffer, sizeof(buffer));\n\tint i = 0;\n\tp = strtok(buffer, \"x\");\n\twhile(p &#38;&#38; i &#60; 2){\n\t\tpotentiometerParts[i] = p;\n\t\tp = strtok(NULL, \"x\");\n\t\t++i;\n\t}\n\n\tif(potentiometerParts[0] == \"p3\"){\n\t\tint potentiometerValue = potentiometerParts[1].toInt();\n\t\tif(potentiometerValue == 1){\n\t\t\tbluetoothPrintLine(\"Going slow*\");\n\t\t} else if(potentiometerValue == 2){\n\t\t\tbluetoothPrintLine(\"Going faster*\");\n\t\t} else if(potentiometerValue == 3){\n\t\t\tbluetoothPrintLine(\"Going fast*\");\n\t\t}\n\t}\n\n// potentiometer 0 - 500\n\tpotentiometer = data;\n\tpotentiometer.toCharArray(buffer, sizeof(buffer));\n\ti = 0;\n\tp = strtok(buffer, \"x\");\n\twhile(p &#38;&#38; i &#60; 2){\n\t\tpotentiometerParts[i] = p;\n\t\tp = strtok(NULL, \"x\");\n\t\t++i;\n\t}\n
    \n\tif(potentiometerParts[0] == \"p4\"){\n\t\tString potentiometerValue = potentiometerParts[1];\n\t\tbluetoothPrintLine(\"Value: \" + potentiometerValue + \"*\");\n\t}\n}\n\nvoid bluetoothPrintLine(String line){\n\tunsigned l = line.length();\n\tfor (int i = 0; i &#60; l; i++) {\n\t\tif (line[i] != \'\u005c0\'){\n\t\t\tSerialBT.write(byte(line[i]));\n\t\t}\n\t}\n}</string>
    <string name="btText11"><b>Notes:</b>\nTo add a line break in the message sent by the arduino just write "#br#" in the send string.</string>
</resources>